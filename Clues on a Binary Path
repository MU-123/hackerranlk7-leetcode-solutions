import java.io.*;
import java.util.StringTokenizer;

public class Solution {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);

        int n = in.nextInt();
        int m = in.nextInt();
        int d = in.nextInt();

        if (
                !(1 <= n && n <= 70) ||
                !(0 <= m && m <= n * (n - 1)) ||
                !(1 <= d && d <= 20))
            throw new RuntimeException();

        int[] x = new int[m];
        int[] y = new int[m];
        int[] w = new int[m];

        for (int i = 0; i < m; ++i) {
            x[i] = in.nextInt(); x[i]--;
            y[i] = in.nextInt(); y[i]--;
            if (!(0 <= x[i] && x[i] < n) || !(0 <= y[i] && y[i] < n))
                throw new RuntimeException();
            w[i] = in.nextInt();
            if (!(0 <= w[i] && w[i] <= 1))
                throw new RuntimeException();
        }

        int l = (d + 1) / 2;

        int[][] dp =  new int[n][1 << l];
        int[][] ndp = new int[n][1 << l];

        for (int i = 0; i < n; ++i)
            for (int j = 0; j < (1 << l); ++j)
                dp[i][j] = ndp[i][j] = 0;

        dp[0][0] = 1;
        for (int i = 0; i < n; ++i)
            dp[i][0] |= 2;

        for (int c = 0; c < l; ++c) {
            for (int i = 0; i < m; ++i) {
                int u = x[i];
                int v = y[i];
                int b = w[i];

                for (int t = 0; t < (1 << c); ++t) {
                    ndp[u][(t << 1) | b] |= dp[v][t];
                    ndp[v][(t << 1) | b] |= dp[u][t];
                }
            }

            if (c + 1 < l) {
                for (int i = 0; i < n; ++i) {
                    for (int j = 0; j < (1 << (c + 1)); ++j) {
                        dp[i][j] = ndp[i][j];
                        ndp[i][j] = 0;
                    }
                }
            }
        }

        Boolean[] can = new Boolean[1 << d];
        for (int i = 0; i < (1 << d); ++i)
            can[i] = false;

        int r = d - l;
        for (int v = 0; v < n; ++v) {
            for (int t = 0; t < (1 << r); ++t) {
                int c = (l == r ? ndp[v][t] : dp[v][t]);
                if ((c & 1) == 0)
                    continue;
                for (int s = 0; s < (1 << l); ++s) {
                    if ((ndp[v][s] & 2) > 0)
                        can[(t << l) ^ s] = true;
                }
            }
        }

        int res = 0;
        for (int i = 0; i < (1 << d); ++i)
            if (can[i])
                res++;

        out.println(res);
        out.close();
    }
}

class InputReader {
    private final BufferedReader reader;
    private StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
        tokenizer = null;
    }

    public String nextLine() {
        try {
            return reader.readLine();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(nextLine());
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}
