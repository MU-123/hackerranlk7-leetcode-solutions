import java.util.Scanner;

class Solution{
    static byte[][][] deepCopy(byte[][][] grid){
        int n=grid.length;
        byte[][][] out=new byte[n][n][n];
        for(int i=0;i<n;++i){
            for(int j=0;j<n;++j){
                for(int k=0;k<n;++k){
                    out[i][j][k]=grid[i][j][k];
                }
            }
        }
        return out;
    }
    static int countOnes(byte[][][] grid){
        int n=grid.length, ones=0;
        for(int i=0;i<n;++i){
            for(int j=0;j<n;++j){
                for(int k=0;k<n;++k){
                    if(1==grid[i][j][k]) ++ones;
                }
            }
        }
        return ones;
    }
    static byte larger(byte a, byte b){ return a>b?a:b; }
    static int[] solve(byte[][][] grid){
        int n=grid.length, sp[]=new int[n];
        byte[][][] max=deepCopy(grid);
        byte[][][] next=new byte[n][n][n];
        sp[0]=countOnes(max);
        for(int l=1;l<n;++l){
            int count=0;
            for(int i=0;i<n-l;++i){
                for(int j=0;j<n-l;++j){
                    for(int k=0;k<n-l;++k){
                        byte best=0;
                        for(int q=0;q<8;++q){
                            int di=q>>0&1;
                            int dj=q>>1&1;
                            int dk=q>>2&1;
                            byte m=max[i+di][j+dj][k+dk];
                            best=larger(best,m);
                        }
                        next[i][j][k]=best;
                        if(best==l+1) ++count;
                    }
                }
            }
            sp[l]=count;
            byte[][][] temp=max;
            max=next;
            next=temp;
        }
        return sp;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int q=sc.nextInt();
        while(q-- != 0){
            int n=sc.nextInt();
            byte[][][] grid=new byte[n][n][n];
            for(int i=0;i<n;++i){
                for(int j=0;j<n;++j){
                    for(int k=0;k<n;++k){
                        grid[i][j][k]=sc.nextByte();
                    }
                }
            }
            int[] res=solve(grid);
            StringBuilder sb=new StringBuilder();
            for(int x: res) sb.append(x+" ");
            System.out.println(sb);
        }
        sc.close();
    }
}
