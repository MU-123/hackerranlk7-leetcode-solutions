import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {

    static int[] firstRow;
    static int[] nextRow;
    
    static void next(long count) {
        for (int i = 0; i < firstRow.length; i++) {
          nextRow[i] = firstRow[i] ^ firstRow[(int) ((count + i) % firstRow.length)];
        }
        int[] temp = firstRow;
        firstRow = nextRow;
        nextRow = temp;
    }    
    
    static int[] xorMatrix(long m) {
      long pos = 1;
      while (pos < m) {
        long lowerPowerOfTwo = 1;
        while (pos + 2 * lowerPowerOfTwo <= m) {
          lowerPowerOfTwo *= 2;
        }
        next(lowerPowerOfTwo);
        pos += lowerPowerOfTwo;
      }
      return firstRow;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

      StringTokenizer st = new StringTokenizer(br.readLine());
      int n = Integer.parseInt(st.nextToken());
      long m = Long.parseLong(st.nextToken());

      firstRow = new int[n];
      nextRow = new int[n];

      st = new StringTokenizer(br.readLine());

      for (int i = 0; i < n; i++) {
        int item = Integer.parseInt(st.nextToken());
        firstRow[i] = item;
      }

      int[] result = xorMatrix(m);
      
      for (int i = 0; i < n; i++) {
        if (i > 0) {
          bw.write(" ");
        }
        bw.write(String.valueOf(result[i]));
      }

      bw.newLine();

      bw.close();
      br.close();
    }
}
