import java.io.*;
import java.util.*;

import java.math.BigInteger;

public class SolutionDiv2 {


    private static Map<Integer, String> ones = new HashMap<>();

    private static void swap(StringBuilder s, int i, int j) {
        char t = s.charAt(i);
        s.setCharAt(i, s.charAt(j));
        s.setCharAt(j, t);
    }

    private static void rev(StringBuilder s, int l, int r) {
        while (l < r)
            swap(s, l++, r--);
    }

    private static int bsearch(StringBuilder s, int l, int r, int key) {
        int index = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (s.charAt(mid) <= key)
                r = mid - 1;
            else {
                l = mid + 1;
                if (index == -1 || s.charAt(index) >= s.charAt(mid))
                    index = mid;
            }
        }
        return index;
    }

    static boolean nextPermutation(StringBuilder s, int threshold) {

        int len = s.length(), i = len - 2;
        while (i >= threshold && s.charAt(i) >= s.charAt(i + 1))
            --i;
        if (i < threshold)
            return false;
        else {
            int index = bsearch(s, i + 1, len - 1, s.charAt(i));
            swap(s, i, index);
            rev(s, i + 1, len - 1);
            return true;
        }
    }

    static List<String> getCombinations(int length, String suffix, int lastDigit, int sum, int product, int threshold, int modifiedCount) {
        List<String> temp = new ArrayList<>();
        if (suffix.length() == length) {
            temp.add(suffix);
            return temp;
        } else if (modifiedCount == threshold) {
            temp.add(ones.get(length - threshold) + suffix);
            return temp;
        }
        for (int i = 1; i <= lastDigit; i++) {
            if (length - modifiedCount + sum + i > product * i) {
                temp.addAll(getCombinations(length, i + suffix, i, sum + i, product * i, threshold, modifiedCount + 1));
            }
        }
        return temp;
    }

    private static int sum(String s) {
        int sum = 0;
        for (int d : s.toCharArray()) {
            sum += (d - 48);
        }
        return sum;
    }

    private static boolean contains(String s, int d) {
        d += 48;
        int i = s.length() - 1;
        while (i >= 0) {
            if (s.charAt(i) == d) return true;
            else if (s.charAt(i) < d) return false;
            i--;
        }
        return false;
    }

    public static void main(String[] args) {
        StringBuilder temp = new StringBuilder("");
        for(int ii = 0; ii < 800; ii++) {
            ones.put(ii, temp.toString());
            temp.append("1");
        }
        Scanner in = new Scanner(System.in);
        BigInteger nb = in.nextBigInteger();
        Integer n = nb.intValue();
        boolean checkTwo = n % 2 == 0;
        boolean checkThree = n % 3 == 0;
        boolean checkFive = n % 5 == 0;
        boolean check25 = n % 25 == 0;
        int threshold = 0;
        for (int i = 1; i < 1000; i++) {
            
            if (i > 470 && i < 705) i = 705;
            if (i > 190) threshold = i - 7;
            else if (i > 150) threshold = i - 8;
            else if (i > 120) threshold = i - 10;
            else if (i > 90) threshold = i - 12;
            else if (i > 62) threshold = i - 15;
            else if (i > 40) threshold = i - 19;
            else if (i > 30) threshold = i / 2;
            for (String s : getCombinations(i, "", 9, 0, 1, i - threshold, 0)) {
                
                if (checkTwo) {
                    
                    if (!contains(s, 2) && contains(s, 4) && contains(s, 6) && contains(s, 8)) continue;
                } else if (checkFive) {
                    if (!contains(s, 5)) continue;
                    
                    if (check25 && !(contains(s, 2) || (contains(s, 7) && (contains(s, 3) || contains(s, 8))))) continue;
                }
                if (checkThree) {
                    if (sum(s) % 3 != 0) continue;
                }
                StringBuilder t = new StringBuilder(s);
                do {
                    
                    if (checkTwo) {
                        if (t.charAt(i - 1) % 2 == 1 ) continue;
                    } else if (checkFive) {
                        if (t.charAt(i - 1) != 53) continue;
                        if (check25 && i > 5) {
                            if (!(t.charAt(i - 2) == 50 && (t.charAt(i - 3) == 49 || t.charAt(i - 3) == 54)) &&
                                    !(t.charAt(i - 2) == 55 && (t.charAt(i - 3) == 51 || t.charAt(i - 3) == 56)))
                                continue;
                        }
                    }
                    if (new BigInteger(t.toString()).mod(nb).equals(BigInteger.ZERO)) {
                        System.out.println(t.length());
                        return;
                    }
                } while (nextPermutation(t, threshold));
            }
        }
    }
}
