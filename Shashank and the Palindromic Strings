import java.io.*;
import java.util.*;

public class Solution {
  static final int A = 26 * 4;
  static final int MASKS = A + 4;
  static final int MOD = 1_000_000_007;

  static int solve(char[][] parts, int n) {
    int m = parts.length;
    int[] s = new int[n];
    boolean[] edge = new boolean[n + 1];
    edge[0] = true;
    for (int i = 0, j = 0; i < m; i++) {
      for (int k = 0; k < parts[i].length; k++) {
        s[j++] = (parts[i][k] - 'a') << 2;
      }
      edge[j] = true;
    }
    int[][] a = new int[n + 1][MASKS];
    int[][] b = new int[n + 1][MASKS];
    a[0][A + 3] = 1;
    for (int len = n; len > 0; len--) {
      Arrays.fill(b[0], 0);
      for (int i = 0; i <= n - len; i++) {
        int j = i + len;
        int leftNext = edge[i + 1] ? 2 : 0;
        int rightNext = edge[j - 1] ? 1 : 0;
        int[] ai = a[i];
        int[] bi = b[i];
        int[] bi1 = b[i + 1];
        Arrays.fill(bi1, 0);
        int si = s[i];
        int sj = s[j - 1];
        for (int mask = 0; mask < MASKS; mask++) {
          int value = ai[mask];
          if (value == 0) {
            continue;
          }
          int letter = mask & ~3;
          int left = mask & 2;
          int right = mask & 1;
          int index;
          if (letter == A) {
            index = si | leftNext | right;
            bi1[index] = (bi1[index] + value) % MOD;
            if ((leftNext & left) == 0) {
              index = A | leftNext | left | right;
              bi1[index] = (bi1[index] + value) % MOD;
            }
          } else {
            if (sj == letter) {
              index = A | left | rightNext;
              bi[index] = (bi[index] + value) % MOD;
            }
            if ((rightNext & right) == 0) {
              index = letter | left | rightNext | right;
              bi[index] = (bi[index] + value) % MOD;
            }
          }
        }
      }
      int[][] temp = a;
      a = b;
      b = temp;
    }
    int ans = 0;
    for (int i = 0; i <= n; i++) {
      for (int mask = 0; mask < MASKS; mask++) {
        if (!edge[i] && (mask & 3) == 3) {
          continue;
        }
        ans = (ans + a[i][mask]) % MOD;
      }
    }
    return ans;
  }


  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

    StringTokenizer st = new StringTokenizer(br.readLine());
    int q = Integer.parseInt(st.nextToken());

    for (int i = 0; i < q; i++) {
      st = new StringTokenizer(br.readLine());
      int m = Integer.parseInt(st.nextToken());

      char[][] parts = new char[m][];
      int n = 0;
      for (int j = 0; j < m; j++) {
        parts[j] = br.readLine().toCharArray();
        n += parts[j].length;
      }
      long result = solve(parts, n);
      bw.write(String.valueOf(result));
      bw.newLine();
    }
    br.close();
    bw.close();
  }

}
