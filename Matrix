





import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Scanner;


public class Solution {
	static ArrayList<Edge>[] adj;
	static boolean[] hasX;
	static int N, K;
	static long res = 0;
	@SuppressWarnings("unchecked")
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);		
		N = sc.nextInt();
		K = sc.nextInt();
		adj = new ArrayList[N];
		hasX = new boolean[N];
		for(int i=0; i<N; i++){
			adj[i] = new ArrayList<Edge>();
		}
		
		for(int i=0; i<N-1; i++){
			int from = sc.nextInt();
			int to = sc.nextInt();
			int weight = sc.nextInt();
			adj[from].add(new Edge(to, weight));
			adj[to].add(new Edge(from, weight));
		}
		
		for(int i=0; i<K; i++){
			hasX[sc.nextInt()] = true;
		}
		sc.close();
		
		res = 0;
		dfs(0, 0, 0);
		System.out.println(res);
	}
	
	static int dfs(int cur, int parent, int parentWeight){
		PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
				
		for(Edge to : adj[cur]){
			if(to.to != parent){
				int cr = dfs(to.to, cur, to.weight);
				if(cr > 0){
					pq.add(cr);
				}
			}
		}
		
		int min = 0;
		while(!pq.isEmpty()){
			res += min;
			min = pq.remove();
		}
		
		if(hasX[cur]){
			res += min;
			return parentWeight;
		} else if(min>0){
			return Math.min(min, parentWeight);
		} else{
			return 0;
		}
	}
	
	static class Edge{
		public int to;
		public int weight;
		
		public Edge(int to, int weight){
			this.to = to;
			this.weight = weight;
		}
	}
}
