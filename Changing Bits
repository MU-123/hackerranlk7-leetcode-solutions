import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.*;
import java.util.*;


public class ChangingBits {
	
	public static void main(String[] args) throws IOException {
		final int N = IOFast.nextInt();
		final int Q = IOFast.nextInt();
		final char[] A_ = IOFast.next().toCharArray();
		final char[] B_ = IOFast.next().toCharArray();
		final int[] A = new int[N+1];
		final int[] B = new int[N+1];
		final List<TreeSet<Integer>> pos = new ArrayList<TreeSet<Integer>>(3);
		
		for(int i = 0; i < 3; i++) {
			pos.add(new TreeSet<Integer>());
		}
		
		for(int i = 0; i < N; i++) {
			A[i] = A_[N-1-i] - '0';
			B[i] = B_[N-1-i] - '0';
			final int sum = A[i] + B[i];
			pos.get(sum).add(i);
		}
		
		for(int i = 0; i < Q; i++) {
			final String q = IOFast.next();
			switch(q.charAt(4)) {
			
			case 'a': {
				final int idx = IOFast.nextInt();
				final int x = IOFast.nextInt();
				if(A[idx] != x) {
					pos.get(A[idx] + B[idx]).remove(idx);
					pos.get((A[idx]=x) + B[idx]).add(idx);
				}
				break;
			}
			
			case 'b': {
				final int idx = IOFast.nextInt();
				final int x = IOFast.nextInt();
				if(B[idx] != x) {
					pos.get(A[idx] + B[idx]).remove(idx);
					pos.get(A[idx] + (B[idx]=x)).add(idx);
				}
				break;
			}
			
			case 'c': {
				final int idx = IOFast.nextInt();
				int carry = 0;
				final Integer p2 = pos.get(2).lower(idx);
				if(p2 != null) {
					final Integer p0 = pos.get(0).lower(idx);
					if(p0 == null || p2 > p0) {
						carry = 1;
//						System.err.println(p0 + " " + p2 + " " + pos.get(0).size());
					}
				}
				IOFast.out.print((A[idx]+B[idx]+carry)&1);
				break;
			}
			
			}
		}
		IOFast.out.flush();
	}
	

	
	static class IOFast {
		private static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		private static PrintWriter out = new PrintWriter(System.out);
		
		private static final int BUFFER_SIZE = 50 * 200000;
		private static int bufIndex, readLen;
		private static char[] buf = new char[BUFFER_SIZE];
		private static boolean endInput;
		private static boolean[] isDigit = new boolean[256];
		private static boolean[] isSpace = new boolean[256];

		static {
			for(int i = 0; i < 10; i++) {
				isDigit['0' + i] = true;
			}
			isDigit['-'] = true;
			isSpace[' '] = isSpace['\r'] = isSpace['\n'] = isSpace['\t'] = true;
		}

		private static void readBuffer() throws IOException {
			if(bufIndex == readLen && !endInput) {
				readLen = in.read(buf);
				bufIndex = 0;
				if(readLen == -1) {
					endInput = true;
				}
			}
		}

		private static char firstChar() throws IOException {
			readBuffer();
			return buf[bufIndex];
		}

		private static char nextChar() throws IOException {
			readBuffer();
			return buf[bufIndex++];
		}

		private static int readNum() throws IOException {
			int ret = 0;
			for(char c; isDigit[c = nextChar()] && !endInput; ) {
				ret = ret * 10 + c - '0';
			}
			return ret;
		}

		private static int nextInt() throws IOException {
			for(; !isDigit[firstChar()] && !endInput; bufIndex++) {
				;
			}

			int ret;
			if(firstChar() == '-') {
				bufIndex++;
				ret = -readNum();
			} else {
				ret = readNum();
			}

			return ret;
		}
		
		private static long readNumLong() throws IOException {
			long ret = 0;
			for(char c; isDigit[c = nextChar()] && !endInput; ) {
				ret = ret * 10 + c - '0';
			}
			return ret;
		}
		
		private static long nextLong() throws IOException {
			for(; !isDigit[firstChar()] && !endInput; bufIndex++) {
				;
			}

			long ret;
			if(firstChar() == '-') {
				bufIndex++;
				ret = -readNum();
			} else {
				ret = readNum();
			}

			return ret;
		}



		private static String next() throws IOException {
			while(isSpace[firstChar()] && !endInput) {
				bufIndex++;
			}

			StringBuffer sb = new StringBuffer(1024);
			for(char c; !isSpace[c = nextChar()] && !endInput; ) {
				sb.append(c);
			}

			return sb.toString();
		}

		private static double nextDouble() throws IOException {
			return Double.parseDouble(next());
		}

	}
}
