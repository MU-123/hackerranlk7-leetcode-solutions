import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {

  static final int AB = 10;
  static final int MAX = 1 << AB;
  static final long MOD = 1_000_000_007;

  static long hyperStrings(int m, int[] arr) {
    Arrays.sort(arr);
    boolean[] b = new boolean[MAX];
    b[0] = true;
    for (int i = 0; i < arr.length; i++) {
      int n = 1 << Integer.numberOfTrailingZeros(arr[i]);
      for (int j = n-1; j >= 0; j--) {
        if (b[j]) {
          b[j | arr[i]] = true;
        }
      }
    }
    int[] a = new int[MAX];
    int n = 0;
    for (int i = 0; i < MAX; i++) {
      if (b[i]) {
          a[n++] = i;
      }
    }
  
    long result = 0;

    int[][] s = new int[a.length+1][AB];
    s[0][AB-1] = 1;
    for (int i = 0; i < m+1; i++) {
      for (int j = 0; j < AB; j++) {
        result = (result + s[i][j]) % MOD;
        for (int k = 0; k < n; k++) {
          int pop = Integer.bitCount(a[k]);
          int atz = Integer.numberOfTrailingZeros(a[k]);
          if ((i + pop) <= m && atz <= j) {
            int alz = Integer.numberOfLeadingZeros(a[k]);
            s[i+pop][31 - alz] = (int)((s[i+pop][31 - alz] + s[i][j]) % MOD);
          }
        }
      }
    }
    return result;
  }

  static void load(int[] a, int i, char[] arr) {
    for (char c : arr) {
        a[i] |= 1 << (c - 'a');
    }    
  }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());

        int[] a = new int[n];
        String s = br.readLine();
        if (s.contains(" ")) {
          String[] v = s.split(" ");
          for (int i = 0; i < n; i++) {
            load(a, i, v[i].toCharArray());
          }
        } else {
          load(a, 0, s.toCharArray());
          for (int i = 1; i < n; i++) {
            load(a, i, br.readLine().toCharArray());
          }
        }

        long result = hyperStrings(m, a);

        bw.write(String.valueOf(result));
        bw.newLine();

        br.close();
        bw.close();
    }
}
