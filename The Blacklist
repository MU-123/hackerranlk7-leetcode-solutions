import java.io.*;
import java.util.*;

public class Solution {

  static final int INF = Integer.MAX_VALUE / 10;

  static boolean hitmanAvailable(int hitman, int mask) {
    return (((2 << hitman)) & mask) == 0;
  }

  static int useHitman(int hitman, int mask) {
    return mask | (2 << hitman);
  }

  static int sum(int[][] amounts, int hitman, int alreadyKilled, int numToKill) {
    int s = 0;
    for (int i = alreadyKilled; i < alreadyKilled + numToKill; i++) {
      s += amounts[hitman][i];
    }
    return s;
  }

  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

    StringTokenizer st = new StringTokenizer(br.readLine());
    int n = Integer.parseInt(st.nextToken());
    int k = Integer.parseInt(st.nextToken());

    int[][] amounts = new int[k][n];

    for (int i = 0; i < k; i++) {
      st = new StringTokenizer(br.readLine());

      for (int j = 0; j < n; j++) {
        int item = Integer.parseInt(st.nextToken());
        amounts[i][j] = item;
      }
    }

    int maskMax = 2 << k;

    int[][] dp = new int[maskMax][n + 1];
    for (int i = 0; i < maskMax; i++) {
      for (int j = 0; j < n + 1; j++) {
        dp[i][j] = INF;
      }
    }
    dp[0][0] = 0;

    for (int alreadyKilled = 0; alreadyKilled < n; alreadyKilled++) {
      for (int mask = 0; mask < maskMax; mask++) {
        for (int hitman = 0; hitman < k; hitman++) {
          if (hitmanAvailable(hitman, mask)) {
            int maskAfter = useHitman(hitman, mask);
            for (int numToKill = 1; numToKill < n - alreadyKilled + 1; numToKill++) {
              dp[maskAfter][numToKill + alreadyKilled] =
                  Math.min(
                      dp[maskAfter][numToKill + alreadyKilled],
                      dp[mask][alreadyKilled] + sum(amounts, hitman, alreadyKilled, numToKill));
            }
          }
        }
      }
    }

    int result = Integer.MAX_VALUE;
    for (int i = 0; i < maskMax; i++) {
        result = Math.min(result, dp[i][n]);
    }

    bw.write(String.valueOf(result));
    bw.newLine();

    bw.close();
    br.close();
  }
}
